plugins {
	id 'java'
	id 'jacoco' 
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'notification-starter-email'
java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springModulithVersion', "1.2.1")
}

configurations {
 	compileOnly {
 		extendsFrom annotationProcessor
 	}
 }

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	implementation "com.fasterxml.jackson.core:jackson-databind" 
	
	implementation files('jars/commons-0.0.1-SNAPSHOT.jar')
	implementation files('jars/mongodb-starter-0.0.1-SNAPSHOT.jar')
	
	compileOnly 'org.projectlombok:lombok' 
 	annotationProcessor 'org.projectlombok:lombok'
 	
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.springframework.modulith:spring-modulith-starter-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.modulith:spring-modulith-bom:${springModulithVersion}"
	}
}

defaultTasks 'build'
 
tasks.register('printSourceSetInformation') {
 	doLast {
 		sourceSets.each(srcSet -> 
 		println "[" + srcSet.name + "]" 
 		print "-->Source directories: " + srcSet.allava.srcDirs + "\n" 
 		print "-->Output directories: " + srcSet.output.classesDirs.files + "\n" 
 		println ""
 	)}
 }
 
 test {
 	finalizedBy jacocoTestReport // report is always generated after tests run
 }
 
 jacocoTestReport {
 	dependsOn test // tests are required to run before generating the 
	reports {
		xml.required.set(true)
	}
 	afterEvaluate {
 		classDirectories.setFrom(files(classDirectories.files.collect {
 			fileTree(dir: it, exclude: [
 				"com/jasonwangongithub/starter/email/EmailApplication.class"
 			])
 		}))
 	}
 }
 
jacocoTestCoverageVerification {
 	violationRules {
 		rule {
 			limit {
 				minimum = 0.3
 			}
 		}
 	}
 }
 
 tasks.named('check').configure {
 	dependsOn tasks.named('jacocoTestCoverageVerification')
 }
 
 tasks.withType(Jar).configureEach {
 	manifest.attributes('Implementation-Title': project.description, 
 		'Implementation-Version': project.version
 	)
 }
 
tasks.named('test') {
	useJUnitPlatform()
}
